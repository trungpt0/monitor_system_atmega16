;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/21/2023
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include <delay.h>
;
;// External Interrupt 0 service routine
;unsigned int cnt_int = 0; // bien diem ngat interrupt
;unsigned int value_reg1 = 225;  // bien luu gia tri chua thanh ghi timer TCNT1H
;unsigned int value_reg2 = 123;  // bien luu gia tri chua thanh ghi timer TCNT1L
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027 // Place your code here
; 0000 0028     PORTC.0 = !PORTC.0; // dao trang thai cua led khi xay ra ngat timer
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0029     TCNT1H=value_reg1;  // thanh ghi 8 bit High luu gia tri cau hinh thoi gian timer
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002A     TCNT1L=value_reg1;  // thanh ghi 8 bit Low luu gia tri cau hinh thoi gian timer
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002B }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;#define ADC_VREF_TYPE 0x00
;unsigned long ADC_OUT = 0; // bien luu gia tri analog khi doc nhiet do
;unsigned long voltage; // bien dung de tinh gia tri cua volte
;unsigned long temperature; // bien luu gia tri nhiet do
;unsigned char tram, chuc, donvi; // khai bao bien tram, chuc, donvi de hien thi so lieu
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0035 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036 // Chon dau vào dien ap tham chieu ADC thông qua thanh ghi ADMUX
; 0000 0037 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0038 // Delay needed for the stabilization of the ADC input voltage
; 0000 0039 delay_us(10);
;PCODE: $00000025 VOL: 0
; 0000 003A // Start the AD conversion
; 0000 003B ADCSRA|=0x40; // 0x40 la set bit ADSC len 1 de bat dau qua trinh chuyen doi ADC
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003C // Wait for the AD conversion to complete
; 0000 003D while ((ADCSRA & 0x10)==0); // doi cho qua trinh chuyen doi hoan tat de bat dau chuyen doi gia tri tiep theo
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003E ADCSRA|=0x10; // dat co bit ADIF xac nhan qua trinh chuyen doi thanh cong
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003F return ADCW;  // tra ve gia tri ADC
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0040 }
;PCODE: $00000033 VOL: 0
;
;// ham truyen uart 1 ky tu
;void uart_char_send(unsigned char chr) {
; 0000 0043 void uart_char_send(unsigned char chr) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0044     while (!(UCSRA & (1<<UDRE))) {};  // ham cho den khi UDR tro thanh trong
;	chr -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0045     UDR=chr; // ghi ky tu vao UDR
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0046 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;// ham truyen uart 1 chuoi ky tu
;void uart_string_send(unsigned char *txt) {
; 0000 0049 void uart_string_send(unsigned char *txt) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004A     unsigned int n, i;
; 0000 004B     n = strlen(txt); // lay do dai cua chuoi ky tu
;PCODE: $00000043 VOL: 0
;	*txt -> Y+4
;	n -> R16,R17
;	i -> R18,R19
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004C     for (i = 0; i < n; i++) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004D         uart_char_send(txt[i]);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004E     }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004F }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;char buffer[5]; // mot mang 5 ky tu buffer dung de luu 4 ky tu truyen tu app
;int i = 0;  // bien dem de xet du 4 ky tu
;// ham ngat nhan uart khi nhan duoc ky tu truyen tu app hoac phan cung
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0055 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0056    char data;   // bien luu tru 1 ky tu
; 0000 0057    data = UDR;  // ghi ky tu tu UDR sang bien data
;PCODE: $00000062 VOL: 0
;	data -> R17
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0058 
; 0000 0059    // phan dieu chinh gia tri cho thanh ghi timer
; 0000 005A    // neu nhu bien data nam trong ma ascii truyen tu app ve thi luu vao buffer
; 0000 005B    if (data >= '0' && data <= '9' || data >= 'A' && data <= 'F') {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005C         buffer[i] = data;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005D         i++;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 005E    }
; 0000 005F 
; 0000 0060    // sau khi du 4 ki tu trong buffer thi xet buffer
; 0000 0061    if (i == 4) {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0062         //uart_string_send(buffer);
; 0000 0063         //uart_char_send(13);
; 0000 0064 
; 0000 0065         if (strcmp(buffer, "F0BD") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 0.5s
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0066             value_reg1 = 240; // bien luu gia tri he 10 cho thanh ghi timer TCNT1H : F0 = 240
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0067             value_reg2 = 189; // bien luu gia tri he 10 cho thanh ghi timer TCNT1L : F0 = 189
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0068         } else if (strcmp(buffer, "E17B") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 1s
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0069             value_reg1 = 225; // bien luu gia tri he 10 cho thanh ghi timer TCNT1H : F0 = 225
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 006A             value_reg2 = 123; // bien luu gia tri he 10 cho thanh ghi timer TCNT1L : F0 = 123
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006B         } else if (strcmp(buffer, "D239") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 1.5s
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006C             value_reg1 = 210;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006D             value_reg2 = 57;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006E         } else if (strcmp(buffer, "C2F6") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 2s
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 006F             value_reg1 = 194;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0070             value_reg2 = 246;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0071         } else if (strcmp(buffer, "B3B4") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 2.5s
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0072             value_reg1 = 179;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0073             value_reg2 = 180;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0074         } else if (strcmp(buffer, "A472") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 3s
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0075             value_reg1 = 164;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0076             value_reg2 = 114;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0077         } else if (strcmp(buffer, "9530") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 3.5s
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0078             value_reg1 = 149;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0079             value_reg2 = 48;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 007A         } else if (strcmp(buffer, "85ED") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 4s
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 007B             value_reg1 = 133;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 007C             value_reg2 = 237;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 007D         } else if (strcmp(buffer, "76AB") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 4.5s
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 007E             value_reg1 = 118;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 007F             value_reg2 = 171;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0080         } else if (strcmp(buffer, "6769") == 0) { // neu nhu 4 ky tu trung voi F0BD tuc la timer 5s
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0081             value_reg1 = 103;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0082             value_reg2 = 105;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0083         } else {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0084 
; 0000 0085         }
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0086    }
; 0000 0087    // neu nhu xet du 4 ky ty thi reset mang i = 0
; 0000 0088    if (i == 4)
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0089    {
; 0000 008A         i = 0;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 008B    }
; 0000 008C 
; 0000 008D 
; 0000 008E    // phan bat/tat 8 den led bang ky tu gui ve tu app
; 0000 008F    switch (data) {
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0090         case 'a': // neu nhu bien data = a thi den PORTB.0 doi trang thai
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0091             PORTB.0 = !PORTB.0;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0092             //uart_char_send(data);
; 0000 0093             //uart_char_send(13);
; 0000 0094             break;
;PCODE: $0000012D VOL: 0
; 0000 0095 
; 0000 0096         case 'b':
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0097             PORTB.1 = !PORTB.1;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0098             //uart_char_send(data);
; 0000 0099             //uart_char_send(13);
; 0000 009A             break;
;PCODE: $0000013B VOL: 0
; 0000 009B 
; 0000 009C         case 'c':
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 009D             PORTB.2 = !PORTB.2;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 009E             //uart_char_send(data);
; 0000 009F             //uart_char_send(13);
; 0000 00A0             break;
;PCODE: $00000149 VOL: 0
; 0000 00A1 
; 0000 00A2         case 'd':
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00A3             PORTB.3 = !PORTB.3;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00A4             //uart_char_send(data);
; 0000 00A5             //uart_char_send(13);
; 0000 00A6             break;
;PCODE: $00000157 VOL: 0
; 0000 00A7 
; 0000 00A8         case 'e':
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00A9             PORTB.4 = !PORTB.4;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00AA             //uart_char_send(data);
; 0000 00AB             //uart_char_send(13);
; 0000 00AC             break;
;PCODE: $00000165 VOL: 0
; 0000 00AD 
; 0000 00AE         case 'f':
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00AF             PORTB.5 = !PORTB.5;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00B0             //uart_char_send(data);
; 0000 00B1             //uart_char_send(13);
; 0000 00B2             break;
;PCODE: $00000173 VOL: 0
; 0000 00B3 
; 0000 00B4         case 'g':
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00B5             PORTB.6 = !PORTB.6;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00B6             //uart_char_send(data);
; 0000 00B7             //uart_char_send(13);
; 0000 00B8             break;
;PCODE: $00000181 VOL: 0
; 0000 00B9 
; 0000 00BA         case 'h':
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00BB             PORTB.7 = !PORTB.7;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00BC             //uart_char_send(data);
; 0000 00BD             //uart_char_send(13);
; 0000 00BE             break;
;PCODE: $0000018F VOL: 0
; 0000 00BF    }
;PCODE: $00000190 VOL: 0
; 0000 00C0 }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0

	.DSEG
_0x17:
	.BYTE 0x32
;
;// ham ngat ngoai khi an nut nhan
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 00C4 {

	.CSEG
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00C5 // Place your code here
; 0000 00C6     cnt_int++; //bien dem so lan ngat ngoai
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00C7     chuc = cnt_int / 10;  // bien chuc luu tru hang chuc bien dem
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00C8     donvi = cnt_int % 10; // bien donvi luu tru hang don vi bien dem
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00C9     // ham gui so lan ngat len app thong qua uart
; 0000 00CA     uart_string_send("Interrupt Counter: ");
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00CB     uart_char_send(chuc+0x30);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00CC     uart_char_send(donvi+0x30);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00CD     uart_char_send(10);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00CE     uart_char_send(13);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00CF }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0

	.DSEG
_0x47:
	.BYTE 0x14
;
;// Declare your global variables here
;
;// ham cau hinh thanh ghi
;void main(void)
; 0000 00D5 {

	.CSEG
;PCODE: $000001B7 VOL: 0
; 0000 00D6 // Declare your local variables here
; 0000 00D7 
; 0000 00D8 // Input/Output Ports initialization
; 0000 00D9 // Port A initialization
; 0000 00DA // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=In
; 0000 00DB // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=T
; 0000 00DC PORTA=0x00; // cau hinh nhu dien ap thap/cao
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00DD DDRA=0xFE;  // cau hinh input/ouput
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00DE 
; 0000 00DF // Port B initialization
; 0000 00E0 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00E1 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00E2 PORTB=0x00;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00E3 DDRB=0xFF;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00E4 
; 0000 00E5 // Port C initialization
; 0000 00E6 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00E7 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00E8 PORTC=0x00;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00E9 DDRC=0xFF;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00EA 
; 0000 00EB // Port D initialization
; 0000 00EC // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 00ED // State7=T State6=T State5=T State4=T State3=T State2=P State1=0 State0=T
; 0000 00EE PORTD=0x04;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00EF DDRD=0x02;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 00F0 
; 0000 00F1 // Timer/Counter 0 initialization
; 0000 00F2 // Clock source: System Clock
; 0000 00F3 // Clock value: Timer 0 Stopped
; 0000 00F4 // Mode: Normal top=0xFF
; 0000 00F5 // OC0 output: Disconnected
; 0000 00F6 TCCR0=0x00;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00F7 TCNT0=0x00;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00F8 OCR0=0x00;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00F9 
; 0000 00FA // Timer/Counter 1 initialization
; 0000 00FB // Clock source: System Clock
; 0000 00FC // Clock value: Timer1 Stopped
; 0000 00FD // Mode: Normal top=0xFFFF
; 0000 00FE // OC1A output: Discon.
; 0000 00FF // OC1B output: Discon.
; 0000 0100 // Noise Canceler: On
; 0000 0101 // Input Capture on Falling Edge
; 0000 0102 // Timer1 Overflow Interrupt: On
; 0000 0103 // Input Capture Interrupt: Off
; 0000 0104 // Compare A Match Interrupt: Off
; 0000 0105 // Compare B Match Interrupt: Off
; 0000 0106 TCCR1A=0x00;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0107 TCCR1B=0x05; // 8MHz / 1024 = 128 microsencond per tick
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0108 
; 0000 0109 //tick 0.5s / 128us = 3906 tick lan tu (65535-3906) den 65535 = 0.5 ms
; 0000 010A TCNT1H=value_reg1;  //0b11000010
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 010B TCNT1L=value_reg2;  //0b11110110
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 010C 
; 0000 010D ICR1H=0x00;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 010E ICR1L=0x00;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 010F 
; 0000 0110 OCR1AH=0x00;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0111 OCR1AL=0x00;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0112 
; 0000 0113 OCR1BH=0x00;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0114 OCR1BL=0x00;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0115 
; 0000 0116 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0117 TIMSK=0x04; // bit quy dinh ngat tran cho thanh ghi timer counter TIMSK
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0118 
; 0000 0119 // Timer/Counter 2 initialization
; 0000 011A // Clock source: System Clock
; 0000 011B // Clock value: Timer2 Stopped
; 0000 011C // Mode: Normal top=0xFF
; 0000 011D // OC2 output: Disconnected
; 0000 011E ASSR=0x00;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 011F TCCR2=0x00;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0120 TCNT2=0x00;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0121 OCR2=0x00;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0122 
; 0000 0123 // External Interrupt(s) initialization
; 0000 0124 // INT0: On
; 0000 0125 // INT0 Mode: Falling Edge
; 0000 0126 // INT1: Off
; 0000 0127 // INT2: Off
; 0000 0128 GICR|=0x40;  // thanh ghi cho phep ngat ngoai
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0129 MCUCR=0x02;  // thanh ghi cau hinh ngat suon xuong: falling
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 012A MCUCSR=0x00;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 012B GIFR=0x40;   // cho phep ngat INT0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 012C 
; 0000 012D // USART initialization
; 0000 012E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 012F // USART Receiver: On
; 0000 0130 // USART Transmitter: On
; 0000 0131 // USART Mode: Asynchronous
; 0000 0132 // USART Baud Rate: 9600
; 0000 0133 UCSRA=0x00;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0134 UCSRB=0x98;  // cau hinh bat Rx, Tx va ngat Rx
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0135 UCSRC=0x86;  // cau hinh truyen du lieu dong bo va khung truyen 8 bit
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0136 UBRRH=0x00;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0137 UBRRL=0x33;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0138 
; 0000 0139 // Analog Comparator initialization
; 0000 013A // Analog Comparator: Off
; 0000 013B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 013C ACSR=0x80;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 013D SFIOR=0x00;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 013E 
; 0000 013F // ADC initialization
; 0000 0140 // ADC Clock frequency: 1000.000 kHz
; 0000 0141 // ADC Voltage Reference: AREF pin
; 0000 0142 // ADC Auto Trigger Source: ADC Stopped
; 0000 0143 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0144 ADCSRA=0x83;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0145 
; 0000 0146 // SPI initialization
; 0000 0147 // SPI disabled
; 0000 0148 SPCR=0x00;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0149 
; 0000 014A // TWI initialization
; 0000 014B // TWI disabled
; 0000 014C TWCR=0x00;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 014D 
; 0000 014E // Global enable interrupts
; 0000 014F #asm("sei")
;PCODE: $0000020B VOL: 0
	sei
;PCODE: $0000020C VOL: 0
; 0000 0150 
; 0000 0151 while (1)
;PCODE: $0000020D VOL: 0
; 0000 0152       {
; 0000 0153       // Place your code here
; 0000 0154         ADC_OUT = read_adc(0); // Luu gia tri analog tu cam bien
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0155         voltage = ADC_OUT * 5000 / 1023; // dien ap = gia tri doc tu cam bien * dien ap tham chieu 5000mV / do phan giai 10 bit: 2^10
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0156         temperature = voltage / 10; // do gia tri nhiet do bang dien ap chia cho 10
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0157 
; 0000 0158         chuc = temperature / 10; // lay so hang chuc cua nhiet do
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0159         donvi = temperature % 10; // lay so hang don vi cua nhiet do
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 015A         uart_char_send(chuc+0x30); // truyen uart ky tu chuc va hien thi len app
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 015B         uart_char_send(donvi+0x30); // truyen uart ky tu donvi va hien thi len app
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 015C         uart_char_send(10);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 015D         uart_char_send(13);
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 015E         delay_ms(200);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 015F       }
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0160 }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
